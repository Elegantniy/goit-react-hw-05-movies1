{"version":3,"file":"static/js/442.9c2b8655.chunk.js","mappings":"oIAAA,IAAMA,EAAW,+BACXC,EAAM,mCAaZ,IAXmB,SAACC,GAAmC,IAAxBC,EAAuB,uDAAP,GAC7C,OAAOC,MAAM,GAAD,OAAIJ,EAAJ,YAAgBE,EAAhB,oBAAqCD,EAArC,YAA4CE,IAAiBE,MACvE,SAAAC,GACE,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAM,mOAElB,OAAOF,EAASG,MACjB,GAEJ,C,6ICVYC,EAAUC,EAAAA,GAAAA,IAAH,wDAKPC,GAAWD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,8PAeRG,GAAgBH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,sNAabK,EAAWL,EAAAA,GAAAA,GAAH,wD,6DC8CrB,EArEqB,WAAO,IAAD,EACzB,GAAwCM,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAuBC,EAAAA,EAAAA,QAAM,UAACH,EAASI,aAAV,QAAmB,WAEhDxB,EAAS,iBAAakB,IAE5BO,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,GAAW1B,GACRG,MAAK,SAAAwB,GACJV,EAAgBU,EACjB,IACAC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,GACf,GAAE,CAAC7B,IAEJ,IAAQgC,EACNhB,EADMgB,YAAaC,EACnBjB,EADmBiB,eAAgBC,EACnClB,EADmCkB,SAAUC,EAC7CnB,EAD6CmB,OAAQC,EACrDpB,EADqDoB,aAGvD,OACE,gCACwC,IAArCC,OAAOC,KAAKtB,GAAcuB,SACzB,4BACE,SAAC7B,EAAD,CAAU8B,GAAIlB,EAAqBmB,QAAnC,SAA4C,cAC5C,UAACjC,EAAD,YACE,0BACE,gBACEkC,IACEV,EAAW,yCAC2BA,GAClCW,EAENC,IAAI,WAGR,4BACE,wBAAKX,KACL,yBAAG,eAAuC,GAA1BG,EAAaS,QAAQ,GAAU,SAC/C,wBAAI,cACJ,uBAAIX,GAAsB,eAC1B,wBAAI,YACJ,uBACqB,IAAlBC,EAAOI,OACJJ,EAAOW,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,MACrC,0BAIV,4BACE,uBAAG,4BACH,UAACnC,EAAD,YACE,yBACE,SAACF,EAAD,CAAe4B,GAAG,OAAlB,SAAyB,YAE3B,yBACE,SAAC5B,EAAD,CAAe4B,GAAG,UAAlB,SAA4B,wBAMtC,SAAC,EAAAU,SAAD,CAAUC,UAAU,yBAAK,eAAzB,UACE,SAAC,KAAD,QAIP,C","sources":["Api/API.js","components/MovieDetails/MovieDetails.styled.js","components/MovieDetails/MovieDetails.jsx"],"sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3';\nconst KEY = '200d87b35a3f8b03a5922cc72885edd9';\n\nconst fetchQuery = (QUERY_URL, searchOptions = '') => {\n  return fetch(`${BASE_URL}/${QUERY_URL}?api_key=${KEY}&${searchOptions}`).then(\n    response => {\n      if (!response.ok) {\n        throw new Error('Щось пішло не так, спробуйте трошки пізніше');\n      }\n      return response.json();\n    }\n  );\n};\n\nexport default fetchQuery;\n","import { NavLink, Link } from 'react-router-dom';\nimport styled from 'styled-components';\nexport const Section = styled.div`\n  display: flex;\n  gap: 20px;\n`;\n\nexport const BackLink = styled(Link)`\n  display: block;\n  width: 60px;\n  text-decoration: none;\n  margin-bottom: 20px;\n  padding: 10px 20px;\n  border: solid 1px rgb(0, 1, 0, 0.24);\n  border-radius: 10px;\n  color: black;\n\n  :active {\n    color: purple;\n  }\n`;\n\nexport const StyledNavLink = styled(NavLink)`\n  display: block;\n  text-decoration: none;\n  padding: 10px 20px;\n  border: solid 1px rgb(0, 1, 0, 0.24);\n  border-radius: 10px;\n  color: black;\n\n  :active {\n    color: purple;\n  }\n`;\n\nexport const ListLink = styled.ul`\n  display: flex;\n  gap: 20px;\n`;\n","import fetchQuery from 'Api/API';\nimport { Suspense, useEffect, useState } from 'react';\nimport { Outlet, useLocation, useParams } from 'react-router-dom';\nimport {\n  StyledNavLink,\n  Section,\n  BackLink,\n  ListLink,\n} from './MovieDetails.styled';\nimport defaultImgMovie from '../../Images/movie.png';\nimport { useRef } from 'react';\n\nconst MovieDetails = () => {\n  const [currentMovie, setCurrentMovie] = useState([]);\n\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkLocationsRef = useRef(location.state ?? '/movies');\n\n  const QUERY_URL = `/movie/${movieId}`;\n\n  useEffect(() => {\n    fetchQuery(QUERY_URL)\n      .then(res => {\n        setCurrentMovie(res);\n      })\n      .catch(error => console.log(error));\n  }, [QUERY_URL]);\n\n  const { poster_path, original_title, overview, genres, vote_average } =\n    currentMovie;\n\n  return (\n    <>\n      {Object.keys(currentMovie).length !== 0 && (\n        <div>\n          <BackLink to={backLinkLocationsRef.current}> Go back</BackLink>\n          <Section>\n            <div>\n              <img\n                src={\n                  poster_path\n                    ? `https://image.tmdb.org/t/p/w500${poster_path}`\n                    : defaultImgMovie\n                }\n                alt=\"...\"\n              ></img>\n            </div>\n            <div>\n              <h1>{original_title}</h1>\n              <p>User Score: {vote_average.toFixed(1) * 10 + ' %'}</p>\n              <h2>Overview</h2>\n              <p>{overview ? overview : 'No review'}</p>\n              <h3>Genres</h3>\n              <p>\n                {genres.length !== 0\n                  ? genres.map(genre => genre.name).join(', ')\n                  : 'Unknown genres'}\n              </p>\n            </div>\n          </Section>\n          <div>\n            <p>Additional Information</p>\n            <ListLink>\n              <li>\n                <StyledNavLink to=\"cast\">Cast</StyledNavLink>\n              </li>\n              <li>\n                <StyledNavLink to=\"reviews\">Reviews</StyledNavLink>\n              </li>\n            </ListLink>\n          </div>\n        </div>\n      )}\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["BASE_URL","KEY","QUERY_URL","searchOptions","fetch","then","response","ok","Error","json","Section","styled","BackLink","Link","StyledNavLink","NavLink","ListLink","useState","currentMovie","setCurrentMovie","movieId","useParams","location","useLocation","backLinkLocationsRef","useRef","state","useEffect","fetchQuery","res","catch","error","console","log","poster_path","original_title","overview","genres","vote_average","Object","keys","length","to","current","src","defaultImgMovie","alt","toFixed","map","genre","name","join","Suspense","fallback"],"sourceRoot":""}